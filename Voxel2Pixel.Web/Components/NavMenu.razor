@using Microsoft.AspNetCore.Components
@using MudBlazor

<MudAppBar Elevation="1" Color="Color.Primary">
	<MudContainer MaxWidth="MaxWidth.Large" Class="d-flex justify-space-between align-center">
		<MudStack Row="true" Spacing="4">
			<MudLink Href="" Color="Color.Inherit" Underline="Underline.None">
				<MudText Typo="Typo.h6">Voxel2Pixel</MudText>
			</MudLink>
			<MudLink Href="/"
					 Color="@(IsCurrentPage("/") || IsCurrentPage("/render") ? Color.Secondary : Color.Inherit)"
					 Underline="Underline.Hover"
					 Class="@(IsCurrentPage("/") || IsCurrentPage("/render") ? "active-link" : "")">
				<div class="d-flex align-center">
					<MudIcon Icon="@Icons.Material.Filled.Image" Class="mr-2" />
					Render
				</div>
			</MudLink>
			<MudLink Href="convert"
					 Color="@(IsCurrentPage("/convert") ? Color.Secondary : Color.Inherit)"
					 Underline="Underline.Hover"
					 Class="@(IsCurrentPage("/convert") ? "active-link" : "")">
				<div class="d-flex align-center">
					<MudIcon Icon="@Icons.Material.Filled.Transform" Class="mr-2" />
					BenVoxel Convert
				</div>
			</MudLink>
			<MudLink Href="https://github.com/BenMcLean/Voxel2Pixel/blob/master/BenVoxel/README.md"
					 Target="_blank"
					 Rel="noopener noreferrer"
					 Color="Color.Inherit"
					 Underline="Underline.Hover">
				<div class="d-flex align-center">
					<MudIcon Icon="@Icons.Material.Filled.Description" Class="mr-2" />
					BenVoxel Spec
				</div>
			</MudLink>
			<MudLink Href="https://github.com/BenMcLean/Voxel2Pixel/"
					 Target="_blank"
					 Rel="noopener noreferrer"
					 Color="Color.Inherit"
					 Underline="Underline.Hover">
				<div class="d-flex align-center">
					<MudIcon Icon="@Icons.Custom.Brands.GitHub" Class="mr-2" />
					GitHub
				</div>
			</MudLink>
		</MudStack>
	</MudContainer>
</MudAppBar>

<style>
	.active-link {
		font-weight: bold;
		border-bottom: 2px solid var(--mud-palette-secondary);
	}
</style>

@code {
	[Inject]
	private NavigationManager? NavigationManager { get; set; }
	protected override void OnInitialized()
	{
		if (NavigationManager is not null)
			NavigationManager.LocationChanged += LocationChanged;
		base.OnInitialized();
	}
	private void LocationChanged(object? sender, LocationChangedEventArgs e) => StateHasChanged();
	public void Dispose()
	{
		if (NavigationManager is not null)
			NavigationManager.LocationChanged -= LocationChanged;
	}
	private bool IsCurrentPage(string href) => string.Equals(
		NavigationManager?.ToBaseRelativePath(NavigationManager.Uri).ToLower().TrimEnd('/'),
		href.TrimStart('/').ToLower(),
		StringComparison.OrdinalIgnoreCase);
}
