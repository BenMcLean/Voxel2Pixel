@page "/"
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats.Png
@using Voxel2Pixel
@using Voxel2Pixel.Color
@using Voxel2Pixel.Interfaces
@using Voxel2Pixel.Model
@using Voxel2Pixel.Pack
@using Voxel2Pixel.Web.Components
@inject ISnackbar Snackbar

<PageTitle>Voxel2Pixel</PageTitle>

<InputFile OnChange="LoadFile" />
@code {
	#region Data
	public bool IsLoading = false;
	Voxel2Pixel.Model.VoxFileModel? VoxFileModel = null;
	public string ImageString = string.Empty;
	public MarkupString ExceptionMessage;
	public CuboidOrientation CuboidOrientation
	{
		get => _cuboidOrientation;
		set
		{
			if (_cuboidOrientation != value)
			{
				_cuboidOrientation = value;
				Preview();
			}
		}
	}
	private CuboidOrientation _cuboidOrientation = CuboidOrientation.SOUTH0;
	#endregion Data
	private async void LoadFile(InputFileChangeEventArgs e)
	{
		IsLoading = true;
		MemoryStream ms = new();
		try
		{
			await e.File.OpenReadStream().CopyToAsync(ms);
			ms.Position = 0;
			VoxFileModel = new(ms);
			Preview();
		}
		catch (Exception ex)
		{
			ExceptionMessage = new MarkupString(ex.GetType().Name + ": " + ex.Message + "<br />" + ex.StackTrace);
		}
		IsLoading = false;
		StateHasChanged();
	}
	public void Preview()
	{
		if (VoxFileModel is VoxFileModel)
			ImageString = new Sprite(
					perspective: Model.Perspective.Iso,
					model: VoxFileModel,
					voxelColor: new NaiveDimmer(VoxFileModel.Palette),
					cuboidOrientation: CuboidOrientation)
				.Process(
					scaleX: 2,
					outline: true)
				.Png()
				.ToBase64String(PngFormat.Instance);
	}
}
<br />
@if (!string.IsNullOrWhiteSpace(ExceptionMessage.ToString()))
{
	<div>@ExceptionMessage</div>
	<br />
}
@if (IsLoading)
{
	<div>Loading...</div>
	<br />
}
else
{
	if (!string.IsNullOrWhiteSpace(ImageString))
	{
		<img src="@ImageString" />
		<br />
	}
	if (VoxFileModel?.Palette is not null)
	{
		foreach (uint color in VoxFileModel.Palette.Skip(1))
		{
			string hex = "#" + (color >> 8).ToString("X");
			<input type="color" value="@hex" disabled />
		}
	}
	<br />
}
<span>Parent sees: @CuboidOrientation</span>
<br />
<CuboidOrientationInput @bind-Value="@CuboidOrientation" />
<br />
<MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" name="ParentReset" @onclick="@(e => CuboidOrientation = CuboidOrientation.SOUTH0)">Parent Reset</MudButton>
