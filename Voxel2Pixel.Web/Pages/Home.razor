@page "/"
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using MudBlazor.Utilities
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats.Gif
@using SixLabors.ImageSharp.Formats.Png
@using Voxel2Pixel
@using Voxel2Pixel.Color
@using Voxel2Pixel.Draw
@using Voxel2Pixel.Interfaces
@using Voxel2Pixel.Model
@using Voxel2Pixel.Model.FileFormats
@using Voxel2Pixel.Render
@using Voxel2Pixel.Web.Components
@inject ISnackbar Snackbar

<PageTitle>Voxel2Pixel</PageTitle>

@code {
	#region Data
	public bool IsLoading { get; set; } = false;
	VoxFileModel? VoxFileModel { get; set; } = null;
	public string ImageString { get; set; } = string.Empty;
	public MarkupString ExceptionMessage { get; set; }
	public SpriteMaker SpriteMaker { get; set; } = new();
	public MudColor OutlineMudColor
	{
		get => MudColor(SpriteMaker.OutlineColor);
		set => SpriteMaker.SetOutlineColor(Color(value));
	}
	public MudColor ShadowMudColor
	{
		get => shadowMudColor;
		set => SpriteMaker.SetShadowColor(Color(shadowMudColor = value));
	}
	private MudColor shadowMudColor = MudColor(Sprite.DefaultShadowColor);
	#endregion Data
	public static uint Color(MudColor color) => (uint)(color.R << 24 | color.G << 16 | color.B << 8 | color.A);
	public static MudColor MudColor(uint rgba) => new MudColor(
		r: (byte)(rgba >> 24),
		g: (byte)(rgba >> 16),
		b: (byte)(rgba >> 8),
		a: (byte)rgba);
	private async void LoadFile(IBrowserFile file)
	{
		IsLoading = true;
		MemoryStream memoryStream = new();
		try
		{
			await file.OpenReadStream().CopyToAsync(memoryStream);
			memoryStream.Position = 0;
			VoxFileModel = new(memoryStream);
			SingleImage();
		}
		catch (Exception ex)
		{
			ExceptionMessage = new MarkupString(ex.GetType().Name + ": \"" + ex.Message + "\"<br />" + ex.StackTrace);
		}
		IsLoading = false;
		StateHasChanged();
	}
	public void SingleImage()
	{
		if (VoxFileModel is VoxFileModel)
			ImageString = SpriteMaker
				.Set(VoxFileModel)
				.Set(new NaiveDimmer(VoxFileModel.Palette))
				.Make()
				.Png()
				.ToBase64String(PngFormat.Instance);
	}
	public void Iso8TextureAtlas()
	{
		if (VoxFileModel is VoxFileModel)
		{
			Dictionary<string, Sprite> sprites = [];
			byte direction = 0;
			foreach (SpriteMaker spriteMaker in new SpriteMaker()
				.Set(VoxFileModel)
				.Set(new NaiveDimmer(VoxFileModel.Palette))
				.Iso8())
				sprites.Add("Sprite" + direction++, spriteMaker.Make());
			ImageString = new Sprite(sprites, out _)
				.Png()
				.ToBase64String(PngFormat.Instance);
		}
	}
	public void Iso8Gif()
	{
		if (VoxFileModel is VoxFileModel)
			ImageString = SpriteMaker
				.Set(VoxFileModel)
				.Set(new NaiveDimmer(VoxFileModel.Palette))
				.Iso8()
				.Make()
				.AnimatedGif()
				.ToBase64String(GifFormat.Instance);
	}
	public void StacksGif()
	{
		if (VoxFileModel is VoxFileModel)
			ImageString = SpriteMaker
				.Set(VoxFileModel)
				.Set(new NaiveDimmer(VoxFileModel.Palette))
				.Stacks()
				.Make()
				.AnimatedGif(25)
				.ToBase64String(GifFormat.Instance);
	}
}
@if (!string.IsNullOrWhiteSpace(ImageString))
{
	<img src="@ImageString" />
	<br />
}
<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
	<MudTabPanel Text="Import">
		<MudFileUpload T="IBrowserFile" FilesChanged="LoadFile" Accept=".vox">
			<ActivatorContent>
				<MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
					Upload .vox File
				</MudButton>
			</ActivatorContent>
		</MudFileUpload>
	</MudTabPanel>
	<MudTabPanel Text="Perspective">
		<MudSelect T="Perspective" @bind-Value="@SpriteMaker.Perspective" Class="flex-grow-0">
			@foreach (Perspective perspective in Enum.GetValues(typeof(Perspective)))
			{
				<MudSelectItem Value="@perspective" />
			}
		</MudSelect>
		@if (SpriteMaker.Perspective.IsPeak())
		{
			<MudElement Class="d-inline-flex flex-wrap gap-2">
				<MudNumericField T="byte" @bind-Value="SpriteMaker.PeakScaleX" Label="Peak Scale X" Variant="Variant.Text" Min="1" Max="255" />
				<MudNumericField T="byte" @bind-Value="SpriteMaker.PeakScaleY" Label="Peak Scale Y" Variant="Variant.Text" Min="2" Max="255" />
			</MudElement>
		}
		@if (SpriteMaker.Perspective.HasShadow())
		{
			<MudElement Class="d-inline-flex flex-wrap gap-2">
				<MudCheckBox @bind-Value="@SpriteMaker.Shadow" Label="Shadow" />
				@if (SpriteMaker.Shadow)
				{
					<MudColorPicker @bind-Value="ShadowMudColor" Label="Shadow Color" Style="@($"color: {ShadowMudColor};")" />
				}
			</MudElement>
		}
		@if (SpriteMaker.Perspective == Perspective.Stacked)
		{
			<MudSlider @bind-Value="@SpriteMaker.Radians" Min="0d" Max="@Math.Tau" Step="double.Epsilon">Radians</MudSlider>
		}
	</MudTabPanel>
	<MudTabPanel Text="Orientation">
		<MudElement Class="d-inline-flex flex-wrap gap-2">
			<MudCheckBox @bind-Value="@SpriteMaker.FlipX" Label="Flip X" />
			<MudCheckBox @bind-Value="@SpriteMaker.FlipY" Label="Flip Y" />
			<MudCheckBox @bind-Value="@SpriteMaker.FlipZ" Label="Flip Z" />
		</MudElement>
		<br />
		<CuboidOrientationInput @bind-Value="@SpriteMaker.CuboidOrientation" />
	</MudTabPanel>
	<MudTabPanel Text="Post-Processing">
		<MudElement Class="d-inline-flex flex-wrap gap-2">
			<MudNumericField T="ushort" @bind-Value="SpriteMaker.ScaleX" Label="Scale X" Variant="Variant.Text" Min="1" />
			<MudNumericField T="ushort" @bind-Value="SpriteMaker.ScaleY" Label="Scale Y" Variant="Variant.Text" Min="1" />
		</MudElement>
		<br />
		<MudElement Class="d-inline-flex flex-wrap gap-2">
			<MudCheckBox @bind-Value="@SpriteMaker.Outline" Label="Outline" />
			@if (SpriteMaker.Outline)
			{
				<MudColorPicker @bind-Value="OutlineMudColor" Label="Outline Color" Style="@($"color: {OutlineMudColor};")" />
			}
		</MudElement>
	</MudTabPanel>
	<MudTabPanel Text="Export" Disabled="VoxFileModel is null">
		<MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" name="SingleImage" @onclick="SingleImage">Generate Single Image</MudButton>
		<MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" name="Iso8TextureAtlas" @onclick="Iso8TextureAtlas">Generate 8 Isometric Directional Sprites Texture Atlas</MudButton>
		<MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" name="Iso8" @onclick="Iso8Gif">Generate 8 Isometric Directional Sprites Animation</MudButton>
		<MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" name="Iso8" @onclick="StacksGif">Generate Sprite Stacks Animation</MudButton>
	</MudTabPanel>
</MudTabs>
@if (!string.IsNullOrWhiteSpace(ExceptionMessage.ToString()))
{
	<br />
	<div>@ExceptionMessage</div>
}
@if (IsLoading)
{
	<br />
	<div>Loading...</div>
}
