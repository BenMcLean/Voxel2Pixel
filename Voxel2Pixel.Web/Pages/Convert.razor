@page "/Convert"
@using BenVoxel
@using System.Xml.Serialization
@using System.Text
@using System.Text.Json
@using System.Text.Json.Nodes
@inject IJSRuntime JS

<PageTitle>BenVoxel Converter</PageTitle>

<h1>BenVoxel Converter</h1>

<p>Upload a BenVoxel or MagicaVoxel file to convert BenVoxel formats.</p>

<MudFileUpload T="IBrowserFile" FilesChanged="LoadFile" Accept=".vox,.ben,.json">
	<ActivatorContent>
		<MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" StartIcon="@Icons.Material.Filled.UploadFile">
			Upload File
		</MudButton>
	</ActivatorContent>
</MudFileUpload>
@if (!string.IsNullOrWhiteSpace(Json))
{
	<br />
	<MudButton OnClick="DownloadBenFile" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" StartIcon="@Icons.Material.Filled.FileDownload">
		Download .ben
	</MudButton>
	<MudButton OnClick="DownloadJsonFile" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" StartIcon="@Icons.Material.Filled.FileDownload">
		Download .ben.json
	</MudButton>
	<br />
	<MudTextField T="string" Value=@Json Label="JSON" Variant="Variant.Outlined" Lines="10" ReadOnly="true" Style="font-family: monospace; white-space: pre;" />
}
@if (!string.IsNullOrWhiteSpace(ExceptionMessage.ToString()))
{
	<br />
	<div>@ExceptionMessage</div>
}
<script>
	window.downloadFileFromStream = async (fileName, contentStreamReference) => {
		const arrayBuffer = await contentStreamReference.arrayBuffer();
		const blob = new Blob([arrayBuffer]);
		const url = URL.createObjectURL(blob);
		const anchorElement = document.createElement('a');
		anchorElement.href = url;
		anchorElement.download = fileName ?? '';
		anchorElement.click();
		anchorElement.remove();
		URL.revokeObjectURL(url);
	}
</script>
@code {
	#region Data
	public bool IsLoading { get; set; } = false;
	public MarkupString ExceptionMessage { get; set; }
	public BenVoxelFile? File { get; set; } = null;
	public string? Json { get; set; } = null;
	#endregion Data
	private async void LoadFile(IBrowserFile file)
	{
		IsLoading = true;
		using MemoryStream memoryStream = new();
		await file.OpenReadStream().CopyToAsync(memoryStream);
		memoryStream.Position = 0;
		try
		{
			switch (Path.GetExtension(file.Name).ToLowerInvariant())
			{
				case ".vox":
					File = Voxel2Pixel.Model.SvoModel.FromMagicaVoxel(memoryStream);
					break;
				case ".json":
					File = new BenVoxelFile(JsonSerializer.Deserialize<JsonObject>(memoryStream));
					break;
				default:
					File = new BenVoxelFile(memoryStream);
					break;
			}
			Json = File.ToJson().Tabs();
		}
		catch (Exception ex)
		{
			ExceptionMessage = new MarkupString(ex.GetType().Name + ": \"" + ex.Message + "\"<br />" + ex.StackTrace);
		}
		IsLoading = false;
		StateHasChanged();
	}
	private async Task DownloadBenFile()
	{
		MemoryStream? memoryStream = null;
		try
		{
			if (File is null)
				throw new NullReferenceException("No file!");
			memoryStream = new MemoryStream();
			File.Write(memoryStream);
			memoryStream.Position = 0;
			using DotNetStreamReference streamRef = new(stream: memoryStream, leaveOpen: true);
			await JS.InvokeVoidAsync(identifier: "downloadFileFromStream", ".ben", streamRef);
		}
		catch (Exception ex)
		{
			ExceptionMessage = new MarkupString(ex.GetType().Name + ": \"" + ex.Message + "\"<br />" + ex.StackTrace);
			StateHasChanged();
		}
		finally
		{
			memoryStream?.Dispose();
		}
	}
	private async Task DownloadJsonFile()
	{
		MemoryStream? memoryStream = null;
		try
		{
			if (File is null)
				throw new NullReferenceException("No file!");
			memoryStream = new MemoryStream();
			memoryStream.Write(Encoding.UTF8.GetBytes(File.ToJson().Tabs()));
			memoryStream.Position = 0;
			using DotNetStreamReference streamRef = new(stream: memoryStream, leaveOpen: true);
			await JS.InvokeVoidAsync(identifier: "downloadFileFromStream", ".ben.json", streamRef);
		}
		catch (Exception ex)
		{
			ExceptionMessage = new MarkupString(ex.GetType().Name + ": \"" + ex.Message + "\"<br />" + ex.StackTrace);
			StateHasChanged();
		}
		finally
		{
			memoryStream?.Dispose();
		}
	}
}
