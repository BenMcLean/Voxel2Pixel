@page "/Convert"
@using BenVoxel
@using System.Xml.Serialization
@using System.Text
@inject IJSRuntime JS

<PageTitle>BenVoxel Converter</PageTitle>

<h1>BenVoxel Converter</h1>

<p>Upload a BenVoxel or MagicaVoxel file to convert BenVoxel formats.</p>

<MudFileUpload T="IBrowserFile" FilesChanged="LoadFile" Accept=".vox">
	<ActivatorContent>
		<MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" StartIcon="@Icons.Material.Filled.UploadFile">
			Upload File
		</MudButton>
	</ActivatorContent>
</MudFileUpload>
@if (!string.IsNullOrWhiteSpace(Xml))
{
	<br />
	<MudButton OnClick="DownloadBenFile" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" StartIcon="@Icons.Material.Filled.FileDownload">
		Download .BEN
	</MudButton>
	<MudButton OnClick="DownloadXmlFile" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" StartIcon="@Icons.Material.Filled.FileDownload">
		Download .XML
	</MudButton>
	<br />
	<MudTextField T="string" Value=@Xml Label="XML" Variant="Variant.Outlined" Lines="10" ReadOnly="true" Style="font-family: monospace; white-space: pre;" />
}
@if (!string.IsNullOrWhiteSpace(ExceptionMessage.ToString()))
{
	<br />
	<div>@ExceptionMessage</div>
}
<script>
	window.downloadFileFromStream = async (fileName, contentStreamReference) => {
		const arrayBuffer = await contentStreamReference.arrayBuffer();
		const blob = new Blob([arrayBuffer]);
		const url = URL.createObjectURL(blob);
		const anchorElement = document.createElement('a');
		anchorElement.href = url;
		anchorElement.download = fileName ?? '';
		anchorElement.click();
		anchorElement.remove();
		URL.revokeObjectURL(url);
	}
</script>
@code {
	#region Data
	public bool IsLoading { get; set; } = false;
	public MarkupString ExceptionMessage { get; set; }
	public BenVoxelFile? File { get; set; } = null;
	public string? Xml { get; set; } = null;
	#endregion Data
	private async void LoadFile(IBrowserFile file)
	{
		IsLoading = true;
		using MemoryStream memoryStream = new();
		await file.OpenReadStream().CopyToAsync(memoryStream);
		memoryStream.Position = 0;
		try
		{
			switch (Path.GetExtension(file.Name).ToLowerInvariant())
			{
				case ".vox":
					File = Voxel2Pixel.Model.SvoModel.FromMagicaVoxel(memoryStream);
					break;
				case ".xml":
					File = (BenVoxelFile)(new XmlSerializer(typeof(BenVoxelFile)).Deserialize(memoryStream)
						?? throw new NullReferenceException($"Couldn't deserialize \"{file.Name}\"."));
					break;
				default:
					File = new BenVoxelFile(memoryStream);
					break;
			}
			// Xml = File.Utf8Xml(); TODO fix
		}
		catch (Exception ex)
		{
			ExceptionMessage = new MarkupString(ex.GetType().Name + ": \"" + ex.Message + "\"<br />" + ex.StackTrace);
		}
		IsLoading = false;
		StateHasChanged();
	}
	private async Task DownloadBenFile()
	{
		try
		{
			using MemoryStream memoryStream = new();
			File?.Write(memoryStream);
			memoryStream.Position = 0;
			using DotNetStreamReference streamRef = new(stream: memoryStream);
			await JS.InvokeVoidAsync(identifier: "downloadFileFromStream", ".BEN", streamRef);
		}
		catch (Exception ex)
		{
			ExceptionMessage = new MarkupString(ex.GetType().Name + ": \"" + ex.Message + "\"<br />" + ex.StackTrace);
			StateHasChanged();
		}
	}
	private async Task DownloadXmlFile()
	{
		// try
		// {
		// 	using MemoryStream memoryStream = new();
		// 	memoryStream.Write(Encoding.UTF8.GetBytes(File.Utf8Xml()));
		// 	memoryStream.Position = 0;
		// 	using DotNetStreamReference streamRef = new(stream: memoryStream);
		// 	await JS.InvokeVoidAsync(identifier: "downloadFileFromStream", ".BEN.xml", streamRef);
		// }
		// catch (Exception ex)
		// {
		// 	ExceptionMessage = new MarkupString(ex.GetType().Name + ": \"" + ex.Message + "\"<br />" + ex.StackTrace);
		// 	StateHasChanged();
		// }
	}
}
